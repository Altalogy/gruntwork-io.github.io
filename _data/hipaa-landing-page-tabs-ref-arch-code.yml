- id: infra-terraform
  title: Terraform
  content: |
    <figure>
      <pre>
      <code class="language-hcl">
        module "fargate_service" {
          source  = "github.com/gruntwork-io/service-catalog//ecs-service"
          version = "v0.51.0"

          service_name          = "my-heroku-app"
          launch_type           = "FARGATE"
          ecs_cluster_arn       = module.fargate_cluster.arn

          task_cpu                = 256
          task_memory             = 512
          desired_number_of_tasks = 3

          container_definitions = [
            {
              name         = "my-heroku-app"
              image        = "https://123456789012.dkr.ecr.us-east-1.amazonaws.com/my-heroku-app:v1"
              essential    = true
              portMappings = [
                {
                  "hostPort"      = 3000
                  "containerPort" = 3000
                  "protocol"      = "tcp"
                }
              ]
            }
          ]

          domain_name = "example.your-domain.com"
        }

        module "fargate_cluster" {
          source  = "github.com/gruntwork-io/service-catalog//ecs-fargate-cluster"
          version = "v0.51.0"

          cluster_name = "my-fargate-cluster"
        }
      </code>
      </pre>
- id: infra-docker
  title: Docker
  content: |
    <figure>
      <pre>
      <code class="language-docker">
        #############
        # Dockerfile
        #############

        FROM python:3.8-alpine AS with-secrets-python
        MAINTAINER Gruntwork <info@gruntwork.io>

        # Require a build-time arg of your GitHub Personal Token. Be sure to read the intro notes to understand the risks of
        # passing in secrets this way.
        # Example command: docker build --build-arg GITHUB_OAUTH_TOKEN --tag gruntwork/ecs-deploy-runner .
        # This example will set the GITHUB_OAUTH_TOKEN build arg using the value of the environment variable with the same name.
        ARG GITHUB_OAUTH_TOKEN

        # These build args have defaults that can be overridden. For example, you can update the terraform version by passing
        # in: --build-arg terraform_version=0.12.21
        ARG terraform_version=0.15.5
        ARG terragrunt_version=v0.30.7
        ARG packer_version=1.6.6
        ARG kubergrunt_version=v0.7.2
        # This should correspond to the latest version supported by EKS
        ARG kubectl_version=v1.20.4

        # If the build-time arg is not defined, make it clear to the user.
        RUN if [ -z "$GITHUB_OAUTH_TOKEN" ]; then echo "ERROR: You must set GITHUB_OAUTH_TOKEN as a Docker build arg."; exit 1; fi

        RUN apk add --no-cache jq bash sudo curl && echo "set disable_coredump false" > /etc/sudo.conf
        RUN curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version v0.0.23
        RUN gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "$module_ci_tag" --branch "$module_ci_branch" && \
            gruntwork-install --module-name "infrastructure-deploy-script" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "$module_ci_tag" --branch "$module_ci_branch" && \
            gruntwork-install --module-name "build-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "$module_ci_tag" --branch "$module_ci_branch" && \
            gruntwork-install --module-name "git-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "$module_ci_tag" --branch "$module_ci_branch" && \
            gruntwork-install --module-name "terraform-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "$module_ci_tag" --branch "$module_ci_branch" && \
            gruntwork-install --binary-name "kubergrunt" --repo "https://github.com/gruntwork-io/kubergrunt" --tag "$kubergrunt_version"

        # Install Terraform, Terragrunt, Packer, and kubectl using configure-environment-for-gruntwork-module.
        RUN configure-environment-for-gruntwork-module \
              --go-version "NONE" \
              --terraform-version "$terraform_version" \
              --terragrunt-version "$terragrunt_version" \
              --packer-version "$packer_version" \
              --kubectl-version "$kubectl_version"

        # Install awscli with pip
        RUN pip install awscli
        
        ...
      </code>
      </pre>
      <figure>
- id: infra-packer
  title: Packer
  content: |
    <figure>
      <pre>
      <code class="language-json">
      /*************************************
      * Packer configurations to create AMIs
      **************************************/
      {
        "variables": {
          "service_catalog_ref": null,
          "version_tag": null,
          "aws_region": "us-east-1",
          "ami_name": "eks-workers",
          "github_auth_token": "{{env `GITHUB_OAUTH_TOKEN`}}",
          "encrypt_boot": "true",
          "vpc_filter_key": "isDefault",
          "vpc_filter_value": "true",
          "vpc_subnet_filter_key": "default-for-az",
          "vpc_subnet_filter_value": "true",
          "gruntwork_installer_version": "v0.0.36",
          "kubernetes_version": "1.20",
          "enable_ssh_grunt": "true",
          "ssh_interface": "public_ip",
          "associate_public_ip_address": "true"
        },
         "vpc_filter": {
            "filters": {
              "{{user `vpc_filter_key`}}": "{{user `vpc_filter_value`}}"
            }
          },
          "subnet_filter": {
            "filters": {
              "{{user `vpc_subnet_filter_key`}}": "{{user `vpc_subnet_filter_value`}}"
            },
            "most_free": "true"
          },
        }],
        "provisioners": [{
          "type": "shell",
          "inline": [
            "sudo yum update -y && sudo yum install -y aws-cli unzip perl-Digest-SHA jq",
            "curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version {{user `gruntwork_installer_version`}}",
            "gruntwork-install --module-name services/eks-workers --repo https://github.com/gruntwork-io/terraform-aws-service-catalog --tag {{user `service_catalog_ref`}}"
          ],
          "environment_vars": [
            "GITHUB_OAUTH_TOKEN={{user `github_auth_token`}}",
            "terraform_aws_eks_version={{user `terraform_aws_eks_version`}}",
            "module_security_version={{user `module_security_version`}}",
            "module_ec2_baseline_branch={{user `module_ec2_baseline_branch`}}",
            "enable_cloudwatch_metrics={{user `enable_cloudwatch_metrics`}}",
            "enable_cloudwatch_log_aggregation={{user `enable_cloudwatch_log_aggregation`}}"
          ],
          "pause_before": "30s"
        }]
      }
      </code>
      </pre>
      <figure>
